@inject IServiceCounter service
<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me to increment</button>
<button class="btn btn-secondary" @onclick="DecrementCount">Click me to decrement</button>
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <h2 class="alert-warning">Error: @errorMessage</h2>
}
@code {
    private string? errorMessage = null;

    protected override void OnInitialized()
    {
        currentCount = DefaultCount;
    }

    [Parameter]
    public int DefaultCount { get; set; }

    [Parameter]
    public EventCallback<int> OnNewCountValue { get; set; }  

    private int currentCount = 0;

    private async Task IncrementCount()
    {
        errorMessage = null;
        try
        {
            currentCount = service.Increment(currentCount);
            if(OnNewCountValue.HasDelegate)
                await OnNewCountValue.InvokeAsync(currentCount);
        }
        catch(Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private async Task DecrementCount()
    {
        errorMessage = null;
        try
        {
            currentCount = service.Decrement(currentCount);
            if (OnNewCountValue.HasDelegate)
                await OnNewCountValue.InvokeAsync(currentCount);
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}